version: '3.8'

services:
  # Proxy Pub/Sub Python
  pubsub-proxy:
    build:
      context: ./part2/proxy/python
      dockerfile: Dockerfile
    container_name: distributed-pubsub-proxy
    ports:
      - "5557:5557"  # XSUB
      - "5558:5558"  # XPUB
    networks:
      - chat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import zmq; ctx = zmq.Context(); s = ctx.socket(zmq.REQ); s.connect('tcp://localhost:5557'); s.send_string('test'); s.close(); ctx.term()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Servidor Java (Spring Boot) com ZeroMQ
  chat-server:
    build: 
      context: ./part1/server/java
      dockerfile: Dockerfile
    container_name: distributed-chat-server
    ports:
      - "5555:5555"  # ZeroMQ REQ-REP
    volumes:
      - chat-data:/app/data
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - chat-network
    depends_on:
      pubsub-proxy:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import zmq; ctx = zmq.Context(); s = ctx.socket(zmq.REQ); s.connect('tcp://localhost:5555'); s.send_string('{\"service\":\"users\",\"data\":{\"timestamp\":\"\"}}'); s.recv_string(); s.close(); ctx.term()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cliente Go
  chat-client-1:
    build:
      context: ./part1/client/go
      dockerfile: Dockerfile
    container_name: distributed-chat-client-1
    depends_on:
      chat-server:
        condition: service_healthy
    environment:
      - SERVER_URL=tcp://chat-server:5555
    networks:
      - chat-network
    command: ["./main"]
    stdin_open: true
    tty: true
    restart: "no"

  # Cliente Go adicional para teste (opcional)
  chat-client-2:
    build:
      context: ./part1/client/go
      dockerfile: Dockerfile
    container_name: distributed-chat-client-2
    depends_on:
      chat-server:
        condition: service_healthy
    environment:
      - SERVER_URL=tcp://chat-server:5555
    networks:
      - chat-network
    command: ["./main"]
    stdin_open: true
    tty: true
    restart: "no"
    profiles:
      - multi-client

  # Cliente Bot Automatizado
  chat-bot-1:
    build:
      context: ./part2/client/python-bot
      dockerfile: Dockerfile
    container_name: distributed-chat-bot-1
    depends_on:
      chat-server:
        condition: service_healthy
    networks:
      - chat-network
    restart: unless-stopped
    deploy:
      replicas: 1

  # Cliente Bot Automatizado (r√©plica)
  chat-bot-2:
    build:
      context: ./part2/client/python-bot
      dockerfile: Dockerfile
    container_name: distributed-chat-bot-2
    depends_on:
      chat-server:
        condition: service_healthy
    networks:
      - chat-network
    restart: unless-stopped
    deploy:
      replicas: 1
    profiles:
      - multi-bot

networks:
  chat-network:
    driver: bridge

volumes:
  chat-data:
    driver: local
